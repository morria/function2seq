"""
Read a file containing AST paths associated with a target generated by ASTMiner
and emit data in a format usable by code2seq.
"""

from __future__ import annotations
from pathlib import Path
import logging
import random
from typing import Optional
import csv
import enum
from function2seq.dataset import TargetContexts
from argparse import ArgumentParser
from pathlib import Path


def split(
    file_pathname: Path,
    directory_pathname: Path,
    seed: Optional[int],
    test_ratio: float,
    evaluation_ratio: float,
    max_contexts: int,
) -> None:
    """
    Convert file mapping function names to contexts to a code2seq directory of
    files including test data, training data, evaluation data and a dictionary
    of term frequencies.
    """

    # Set the random seed
    if seed is not None:
        random.seed(seed)

    # Create the output directory
    directory_pathname.mkdir(parents=True, exist_ok=True)

    datatype_file = {
        DataRole.TEST: open(
            directory_pathname / 'test.c2s',
            'w'
        ),
        DataRole.TRAIN: open(
            directory_pathname / 'train.c2s',
            'w'
        ),
        DataRole.EVALUATE: open(
            directory_pathname / 'eval.c2s',
            'w'
        ),
    }

    logging.getLogger('function2seq').info('Reading data')
    with open(file_pathname) as file:
        reader = csv.reader(file, delimiter=' ')
        for row in reader:
            # Skip broken rows
            if len(row) < 2:
                continue
            row_assignment = random_datarole(test_ratio, evaluation_ratio)
            target_context_list = TargetContexts.from_row(row)
            target_context_list.sample_and_pad_contexts(max_contexts)
            target_context_list.write_to_file(datatype_file[row_assignment])
        file.close()


class DataRole(enum.Enum):
    """
    A label for a type of data defining how a row should be used.
    """
    TEST = enum.auto()
    TRAIN = enum.auto()
    EVALUATE = enum.auto()


def random_datarole(test_ratio: float, evaluation_ratio: float) -> DataRole:
    """
    Choose a data type based on the given ratios.
    """
    r = random.randint(0, 100000) / 100000
    if r <= test_ratio:
        return DataRole.TEST
    elif r <= (test_ratio + evaluation_ratio):
        return DataRole.EVALUATE
    else:
        return DataRole.TRAIN


def main():
    parser = ArgumentParser(
        prog='function2seq.split',
        description='Convert file mapping function names to contexts to a '
        + 'code2seq directory of files including test data, training '
        + 'data, evaluation data',
        epilog='',
    )
    parser.add_argument('-i', '--input-file',
                        type=str,
                        help="The pathname of the file holding all paths ' \
                            + 'emitted by ASTMiner'",
                        required=True,
                        )
    parser.add_argument('-o', '--output-directory',
                        type=str,
                        help="The pathname of the directory to output to'",
                        required=True,
                        )
    parser.add_argument('-s', '--seed',
                        type=int,
                        help="The random seed to use when shuffling paths ' \
                            + 'and splitting training and testing sets",
                        default=None,
                        )
    parser.add_argument('-tr', '--test-ratio',
                        type=float,
                        help='The ratio ∊ [0.0, 1.0] of data to use as '
                        + 'testing data (vs. as evaluation or training '
                        + 'data)',
                        default=0.2,
                        )
    parser.add_argument('-er', '--evaluation-ratio',
                        type=float,
                        help='The ratio ∊ [0.0, 1.0] of data to use as '
                        + 'evaluation data (vs. as testing or '
                        + 'training data)',
                        default=0.2,
                        )
    parser.add_argument("-mc", "--max-contexts", default=200,
                        type=int,
                        help="number of max contexts to allow",
                        required=False
                        )

    args = parser.parse_args()

    split(
        Path(args.input_file),
        Path(args.output_directory),
        args.seed,
        args.test_ratio,
        args.evaluation_ratio,
        args.max_contexts,
    )


if __name__ == '__main__':
    main()

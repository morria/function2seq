"""
Read a file containing AST paths associated with a target generated by ASTMiner
and emit data in a format usable by code2seq.
"""

from __future__ import annotations
from pathlib import Path
import logging
import random
from typing import Optional
import csv
import enum
from FunctionPredict.target_contexts import TargetContexts


class DataRole(enum.Enum):
    """
    A label for a type of data defining how a row should be used.
    """
    TEST = enum.auto()
    TRAIN = enum.auto()
    EVALUATE = enum.auto()


def split(
    file_pathname: Path,
    directory_pathname: Path,
    seed: Optional[int],
    test_ratio: float,
    evaluation_ratio: float,
    max_contexts: int,
) -> None:
    """
    Convert file mapping function names to contexts to a code2seq directory of files
    including test data, training data, evaluation data and a dictionary of term
    frequencies..
    """

    # Set the random seed
    if seed is not None:
        random.seed(seed)

    # Create the output directory
    directory_pathname.mkdir(parents=True, exist_ok=True)

    datatype_file = {
        DataRole.TEST: open(directory_pathname / 'target_contexts.test.c2s', 'w'),
        DataRole.TRAIN: open(directory_pathname / 'target_contexts.train.c2s', 'w'),
        DataRole.EVALUATE: open(directory_pathname / 'target_contexts.val.c2s', 'w'),
    }

    logging.getLogger('convert').info('Reading data')
    with open(file_pathname) as file:
        reader = csv.reader(file, delimiter=' ')
        for row in reader:
            # Skip broken rows
            if len(row) < 2:
                continue
            row_assignment = choose_data_type(test_ratio, evaluation_ratio)
            target_context_list = TargetContexts.from_row(row)
            target_context_list.sample_and_pad_contexts(max_contexts)
            target_context_list.write_to_file(datatype_file[row_assignment])
        file.close()


def choose_data_type(test_ratio: float, evaluation_ratio: float) -> DataRole:
    """
    Choose a data type based on the given ratios.
    """
    r = random.randint(0, 100000)/100000
    if r <= test_ratio:
        return DataRole.TEST
    elif r <= (test_ratio + evaluation_ratio):
        return DataRole.EVALUATE
    else:
        return DataRole.TRAIN


def dictionary_from_file(file_pathname: str):
    """
    Read a file mapping IDs to strings
    :param file_pathname: A file name holding a CSV of IDs (ints) mapped to string values.
    :return: An `dict` object mapping IDs to strings
    """
    dictionary = None
    with open(file_pathname) as file:
        sample = file.read(1024)
        file.seek(0)
        dialect = csv.Sniffer().sniff(sample)
        if csv.Sniffer().has_header(sample):
            file.readline()
        reader = csv.reader(file, dialect,
                            delimiter=',', quotechar='"')
        dictionary = {int(_[0]): str(_[1]) for _ in reader}
    return dictionary
